"""Contains all exceptions generated by the library."""

from __future__ import unicode_literals

import psys


class Error(Exception):
    """The base class for all exceptions the library throws."""

    def __init__(self, error, *args, **kwargs):
        super(Error, self).__init__(
            error.format(*args, **kwargs) if args or kwargs else error)


class ExecutionError(Error):
    """Raised when a command failed to execute."""

    def __init__(self, status, stdout, stderr):
        super(ExecutionError, self).__init__("Program terminated with an error status")
        self.__status = status
        self.__stdout = stdout
        self.__stderr = stderr


    def raw_stderr(self):
        """Returns the process' raw stderr."""

        return self.__stderr


    def raw_stdout(self):
        """Returns the process' raw stdout."""

        return self.__stdout


    def status(self):
        """Returns the process' exit status."""

        return self.__status


    def stderr(self):
        """Returns the process' stderr."""

        return psys.u(self.__stderr)


    def stdout(self):
        """Returns the process' stdout."""

        return psys.u(self.__stdout)


class InvalidProcessState(Error):
    """
    Raised on attempt to process an operation on a process with an invalid
    state for this operation.
    """

    def __init__(self, *args, **kwargs):
        super(InvalidProcessState, self).__init__(*args, **kwargs)
